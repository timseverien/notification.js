{"version":3,"sources":["../src/Notification.js"],"names":[],"mappings":";;;;;;IAAM,YAAY;;;;;;;;;AAQH,aART,YAAY,CAQF,IAAI,EAAwC;YAAtC,OAAO,yDAAG,IAAI;YAAE,aAAa,yDAAG,IAAI;;8BARpD,YAAY;;AASV,YACI,IAAI,KAAK,YAAY,CAAC,UAAU,IAChC,IAAI,KAAK,YAAY,CAAC,YAAY,IAClC,IAAI,KAAK,YAAY,CAAC,WAAW,EACnC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;;AAE/C,YAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;AAEjB,YAAI,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACtC,YAAI,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;KAC3D;;;;;;;;;;iBAnBC,YAAY;;eA0BJ,oBAAC,OAAO,EAAE;AAChB,gBAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC7B,sBAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;aACjD;;AAED,gBAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,mBAAO,IAAI,CAAC;SACf;;;;;;;;;eAOe,0BAAC,KAAK,EAAE;AACpB,gBAAI,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC,WAAW,EAAE;AACxC,sBAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;aAC5F;;AAED,gBAAI,CAAC,aAAa,GAAG,KAAK,CAAC;AAC3B,mBAAO,IAAI,CAAC;SACf;;;;;;;;eAMM,mBAAG;AACN,oBAAQ,IAAI,CAAC,IAAI;AACb,qBAAK,YAAY,CAAC,YAAY;AAC1B,2BAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,AACxC,qBAAK,YAAY,CAAC,WAAW;AACzB,2BAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AAAA,AAC3D,qBAAK,YAAY,CAAC,UAAU,CAAC,AAAC;AAC1B,2BAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAAA,aACzC;SACJ;;;WA9DC,YAAY;;;AAkElB,YAAY,CAAC,UAAU,GAAG,GAAG,CAAC;;AAE9B,YAAY,CAAC,YAAY,GAAG,GAAG,CAAC;;AAEhC,YAAY,CAAC,WAAW,GAAG,GAAG,CAAC","file":"notification.js","sourcesContent":["class Notification {\n    /**\n     * Create new Notification instance\n     * @constructor\n     * @param {Number} type\n     * @param {String} [message]\n     * @param {mixed} [promptDefault] - Prompt default value\n     */\n    constructor(type, message = null, promptDefault = null) {\n        if (\n            type !== Notification.TYPE_ALERT &&\n            type !== Notification.TYPE_CONFIRM &&\n            type !== Notification.TYPE_PROMPT\n        ) throw new Error('Invalid notification type');\n\n        this.type = type;\n\n        if (message) this.setMessage(message);\n        if (promptDefault) this.setPromptDefault(promptDefault);\n    }\n\n    /**\n     * Set message\n     * @param {String} message\n     * @return {Alert} self\n     */\n    setMessage(message) {\n        if (typeof message !== 'string') {\n            throw new Error('Message should be a string');\n        }\n\n        this.message = message;\n        return this;\n    }\n\n    /**\n     * Set default prompt value\n     * @param {Number} value\n     * @return {Alert} self\n     */\n    setPromptDefault(value) {\n        if (this.type !== Notification.TYPE_PROMPT) {\n            throw new Error('Setting a prompt value for an non-prompt notification is pretty silly');\n        }\n\n        this.promptDefault = value;\n        return this;\n    }\n\n    /**\n     * Trigger the notification\n     * @return {String|Boolean|undefined}\n     */\n    trigger() {\n        switch (this.type) {\n            case Notification.TYPE_CONFIRM:\n                return window.confirm(this.message);\n            case Notification.TYPE_PROMPT:\n                return window.prompt(this.message, this.promptDefault);\n            case Notification.TYPE_ALERT: default:\n                return window.alert(this.message);\n        }\n    }\n}\n\n/** @const {Number} */\nNotification.TYPE_ALERT = 0x1;\n/** @const {Number} */\nNotification.TYPE_CONFIRM = 0x2;\n/** @const {Number} */\nNotification.TYPE_PROMPT = 0x3;\n"]}